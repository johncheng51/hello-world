<main>
   mlist =List<${t}> list${t}=${n}.stream().map(x -> ${m}(x)).collect(Collectors.toList());
   mset  =Set<${t}>   set${t}=${n}.stream().map(x -> ${n}(x)).collect(Collectors.toSet());
   l2map =Map<${t}, ${t1}> map${t1} = ${n}.stream().collect(Collectors.toMap(${n}::get${m}, x-> ${m1}(x)));
   flist =List<${t}> list${t} = ${n}.stream().filter(Customer::has${c}).collect(Collectors.toList());
   fset  =List<${t}> list${t} = ${n}.stream().filter(Customer::has${c}).collect(Collectors.toSet());
   f2map =Map<${t}, ${t1}> map${t1} = ${n}.stream().filter(Customer::has${m}).collect(Collectors.toMap(${n}::get${m1}, x-> ${m2}(x)));
   s2ar  =String[] array${t}= ${n}.toArray(String[]::new);
   ar2l  =List<${t}> list${t}= Arrays.asList(${n});
   group =Map<${t}, List<${t1}>> group${t} = ${n}.stream().collect(groupingBy(${t1}::get${m}));
</main>
################################################################################
<block name=tomodel>
        private ${t} ToModel(${t}Entity entity) {
        return (${t}) BeanCopy.copy(entity, ${t}.class);
    }
</block>
################################################################################
<block name=controller file=true >
package com.jm.controller;
import java.util.List;
import com.jm.mock.MockModel;
import com.jm.model.Search;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import com.jm.model.${c};
import com.jm.service.${c}Service;

@RestController
@RequestMapping("/api/${lc}")
public class ${c}Controller {
   @Autowired
   protected ${c}Service ${lc}Service;
${m}
}
</block>
################################################################################
<block name=model>
  <app folder=${f}>
     <modelproc package="${p}">
        ${p0}
     </modelproc>
</app>
</block>
################################################################################
<block name=getCount>
    @RequestMapping(value = "${n}", method = RequestMethod.GET)
    public int ${n}() {
        return ${lc}Service.${p0};
    }
</block>
################################################################################
<block name=getAll>
    @RequestMapping(value = "${n}", method = RequestMethod.GET)
    public List<MockModel> ${n}() {
        return ${lc}Service.findAll();
    }
</block>
################################################################################
<block name=search>
    @RequestMapping(value = "${ln}${c}", method = RequestMethod.POST)
    public List<${c}> ${ln}${c}(@RequestBody ${n} ${ln}) {
        return (List<${c}>)(Object) ${lc}Service.${ln}(${ln});
    }
</block>
################################################################################
<block name=create>
    @RequestMapping(value = "${ln}${c}", method = RequestMethod.POST)
    public ${c} ${ln}${c}(@RequestBody ${c} ${lc} ) {
        return (${c}) ${lc}Service.${ln}(${lc});
    }
</block>
################################################################################
<block name=save>
    @RequestMapping(value = "${ln}${c}", method = RequestMethod.POST)
    public ${c} ${ln}${c}(@RequestBody ${c} ${lc}) {
        return (${c}) ${lc}Service.update(${lc});
    }
</block>
################################################################################
<block name=get>
    @RequestMapping(value = "${ln}${c}", method = RequestMethod.GET)
    public ${c} ${ln}${c}() {
        ${c} ${lc}=new ${c}();
        ${lc}.mock();
        return ${lc};
    }
</block>
################################################################################
<block name=request>
    @RequestMapping(value = "${ln}${c}", method = RequestMethod.GET)
    public List<${c}> ${ln}${c}(
                 @RequestParam("${p0}") String ${p0},
                 @RequestParam("${p1}") String ${p1}) {
        Search search=new Search(${p0},${p1});
        return (List<${c}>)(Object) ${lc}Service.search(search);
  }
</block>
################################################################################
<block name=path>
    @RequestMapping(value = "${ln}${c}/{${p0}}/{${p1}}", method = RequestMethod.GET)
    public List<${c}> ${ln}${c}(
                 @PathVariable("${p0}") String ${p0},
                 @PathVariable("${p1}") String ${p1}) {
        Search search=new Search(${p0},${p1});
        return (List<${c}>)(Object) ${lc}Service.search(search);
    }
</block>
################################################################################
<block name=service file=true>
package com.jm.service;
import com.jm.mock.MockModel;
import com.jm.mock.MockUtil;
import com.jm.model.${c};
import java.util.List;
import org.springframework.stereotype.Service;

@Service
public class ${c}Service extends AbsService{

    @Override
    protected List<MockModel> loadObjects() {
            return MockUtil.create(${p0}, ${c}.class,getPrimaryKey());
     }

    @Override
    protected String getFileName() { return "${c}.txt"; }

    @Override
    protected void setPrimaryKey() {   this.primaryKey="${p1}"; }
}
</block>
################################################################################
<block name=comsumer file=true package=config>
package com.jm.config;
import java.util.HashMap;
import java.util.Map;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import com.jm.model.${c};

@Configuration
@EnableKafka
public class ${n}Config {

  @Value("${x}kafka.bootstrap-servers}")
  private String bootstrapServers;

  public Map<String, Object> consumerConfigs() {
    Map<String, Object> props = new HashMap<>();
    props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
    props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
    props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);
    props.put(ConsumerConfig.GROUP_ID_CONFIG, "json");
    return props;
  }

  @Bean
  public ConsumerFactory<String, ${c}> consumerFactory() {
    return new DefaultKafkaConsumerFactory<>(consumerConfigs(), new StringDeserializer(),
        new JsonDeserializer<>(${c}.class));
  }

  @Bean
  public ConcurrentKafkaListenerContainerFactory<String, ${c}> kafkaListenerContainerFactory() {
    ConcurrentKafkaListenerContainerFactory<String, ${c}> factory =
        new ConcurrentKafkaListenerContainerFactory<>();
    factory.setConsumerFactory(consumerFactory());
    return factory;
  }
}
</block>
################################################################################
<block name=producer file=true package=config>
package com.jm.config;
import java.util.HashMap;
import java.util.Map;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonSerializer;
import com.jm.model.${c};

@Configuration
public class ${n}Config {

  @Value("${x}kafka.bootstrap-servers}")
  private String bootstrapServers;

  public Map<String, Object> producerConfigs() {
    Map<String, Object> props = new HashMap<>();
    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
    props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
    props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
    return props;
  }

  @Bean
  public ProducerFactory<String, ${c}> producerFactory() {
    return new DefaultKafkaProducerFactory<>(producerConfigs());
  }

  @Bean
  public KafkaTemplate<String, ${c}> kafkaTemplate() {
    return new KafkaTemplate<>(producerFactory());
  }
  
}
</block>
################################################################################
<block name=kafka file=true package=service useClass=true>
package com.jm.service;
import com.jm.model.*;
import com.jm.util.StreamsSerdes;
import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Printed;
import org.apache.kafka.streams.kstream.Produced;
import org.apache.kafka.streams.kstream.Consumed;
import org.springframework.stereotype.Service;

@Service
public class ${c}Service extends AbsKafkaService{
    @Override
    public StreamsBuilder getBuider() {
        StreamsBuilder ${v} = new StreamsBuilder();
        ${mc}       
        return ${v};
    }
}
</block>
################################################################################
<block name=batch  file=true package=service>
package com.jm.service;
import java.util.Arrays;
import com.jm.util.ParameterValidator;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.core.job.CompositeJobParametersValidator;
import org.springframework.batch.core.job.DefaultJobParametersValidator;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

@EnableBatchProcessing
public class ${c} extends BatchService{

	@Autowired
	private JobBuilderFactory jobBuilderFactory;

	@Autowired
	private StepBuilderFactory stepBuilderFactory;

	@Bean
	public CompositeJobParametersValidator validator() {
		CompositeJobParametersValidator validator =
				new CompositeJobParametersValidator();

		DefaultJobParametersValidator defaultJobParametersValidator =
				new DefaultJobParametersValidator(
						new String[] {"fileName"},
						new String[] {"name", "currentDate"});

		defaultJobParametersValidator.afterPropertiesSet();

		validator.setValidators(
				Arrays.asList(new ParameterValidator(),
					defaultJobParametersValidator));

		return validator;
	}

//	@Bean
//	public Job job() {
//
//		return this.jobBuilderFactory.get("basicJob")
//				.start(step1())
//				.validator(validator())
//				.incrementer(new DailyJobTimestamper())
////				.listener(new JobLoggerListener())
//				.listener(JobListenerFactoryBean.getListener(new JobLoggerListener()))
//				.build();
//	}
//
	@Bean
	public Job job() {
                return this.jobBuilderFactory.get("basicJob2")
				.start(step1())
				.build();
	}

	@Bean
	public Step step1() {
		return this.stepBuilderFactory.get("step1")
				.tasklet(helloWorldTasklet(null, null))
				.build();
	}

	@StepScope
	@Bean
	public Tasklet helloWorldTasklet(
			@Value("#{jobParameters['name']}") String name,
			@Value("#{jobParameters['fileName']}") String fileName) {

		return (contribution, chunkContext) -> {

				System.out.println(
						String.format("Hello, %s!", name));
				System.out.println(
						String.format("fileName = %s", fileName));

				return RepeatStatus.FINISHED;
			};
	}

	@Bean
	public Tasklet helloWorldTasklet() {

		return (contribution, chunkContext) -> {
				String name = (String) chunkContext.getStepContext()
					.getJobParameters()
					.get("name");

				System.out.println(String.format("Hello, %s!", name));
				return RepeatStatus.FINISHED;
			};
	}

	public static void main(String[] args) {
		SpringApplication.run(HelloWorldJob.class, args);
	}
}
</block>