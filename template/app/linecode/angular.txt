<main>
   interface0=${n1};
   model1=p
   model2=this.${n1} = ${n1};
   getName=getName() { return this.model.user;}
   getTodoItems=getTodoItems(){ return this.model.items.filter(item => !item.done);}
   addItem=addItem(newItem) {if (newItem != "") this.model.items.push(new TodoItem(newItem, false));}
   import=  import { ${value} }  from "${svalue}";
   constant=public static ${uvalue}URL = ${c}.baseURL+"/api/${value}";
   vallistp  =public ${lvalue}: ${type}, 
   vallistt  =this.get${value}();
   vallista  =${lvalue}: '',
   vallist   =${value},
   var0      =public ${value},
   vallists=public ${value};
   vallistc=private ${lvalue}: ${value},
</main>
################################################################################
<block name=service file=true package=service>
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
${imports}
@Injectable()
export class ${c} {
  constructor(private http: HttpClient) { }
  ${bc}	
}
</block>

################################################################################
<block name=constant file=true package=model rule=constant>
export class  ${c} {
    public static baseURL = "http://localhost:8080";
    ${imports}	
}
</block>

################################################################################
<block name=data1>
     this.user = "Adam";
     this.items = [new ${c1}("Buy Flowers", false),
                      new ${c1}("Get Shoes", false),
                      new ${c1}("Collect Tickets", false),
                      new ${c1}("Call Joe", false)]
</block>

################################################################################
<block name=baseModel file=true package=model>
export class ${c} {
     ${p0}
    constructor(${p1}) {
     ${p2}
    }
}
</block>

################################################################################
<block name=paraModel file=true package=model>
import { ${c1} } from "./${lc1}";
export class ${c} {
    ${p0}
    constructor() {
        ${data}
    }
}
</block>

################################################################################
<block name=interface file=true package=model>
${imports}
export interface ${c} {
   ${p0}
}
</block>
setParam vallistp vallist1 ????
################################################################################
<block name=model file=true>
${imports}
export class ${c} {

    constructor(
        ${vallist1} ) { }
}
</block>
################################################################################
<block name=module file=true >
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from "@angular/forms";
import { InMemoryWebApiModule } from 'angular-in-memory-web-api';
import { HttpClientModule } from '@angular/common/http';
import { ${n1} }    from './data/${ln1}';
import { ${n2} }    from './service/${ln2}';
import { ${n3} }    from './writer/${ln3}';
import { AppComponent } from './app.component';
${mc}

@NgModule({
  declarations: [AppComponent,
                 ${n3}],
  imports: [BrowserModule,
            HttpClientModule, 
            FormsModule,
            InMemoryWebApiModule.forRoot(${n1})],
  providers: [ ${n2}],
  bootstrap: [AppComponent]
})
export class ${cc} { }
</block>
###############################################################################
<block name=basicModule file=true>
import { NgModule }      from "@angular/core";
import { RouterModule }  from "@angular/router";
import { BrowserModule } from "@angular/platform-browser";
import { AppComponent }  from "./app.component";
${imports}
@NgModule({
    imports: [ BrowserModule,
               ${router},
               ${vallist1}],
    providers: [${a}],
    declarations: [AppComponent],
    bootstrap: [AppComponent]
})
export class ${c} { }
</block>
################################################################################
<block name=branchModule file=true>
import { NgModule } from "@angular/core";
import { BrowserModule } from "@angular/platform-browser";
import { FormsModule } from "@angular/forms";
${imports}

@NgModule({
    imports: [BrowserModule, FormsModule,
              ${vallist1}
             ],
    declarations: [${vallist2}],
    exports: [${vallist3}]
})
export class ${c} { }
</block>
################################################################################
<block name=simpleModule file=true>
import { NgModule } from "@angular/core";
${imports}

@NgModule({
    providers: [${vallist1}]
})
export class ${c} { }
</block>
################################################################################
<block name=component file=true >
import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpErrorResponse } from '@angular/common/http';
import { FormBuilder } from '@angular/forms';
${imports}

@Component({
    selector: "${s}",
    templateUrl: "./${lc}.html"
})
export class ${c} implements OnInit{
   constructor(${vallist1}) { }
 ngOnInit() {
	 ${vallist2}
   }

bookForm = this.${p1}.group({
      ${vallist3}
   });
    ${bc}
    
}
</block>

################################################################################
<block name=component1 file=true >
import { Component, OnInit } from '@angular/core';
${imports}

@Component({
    selector: "${s}",
    templateUrl: "./${lc}.html"
})
export class ${c} implements OnInit{
   ${vallist1} 
   constructor(${vallist2}) { }
   ${bc}
    
}
</block>
################################################################################
<block name=todohtml file=true >
<h3 class="bg-primary p-1 text-white">{{${p0}()}}'s To Do List</h3>
<div class="my-1">
    <input class="form-control" #todoText />
    <button class="btn btn-primary mt-1" (click)="${p1}(todoText.value)">
        Add
    </button>
</div>
<table class="table table-striped table-bordered">
    <thead>
        <tr><th></th><th>Description</th><th>Done</th></tr>
    </thead>
    <tbody>
        <tr *ngFor="let item of ${p2}(); let i = index">
            <td>{{i + 1}}</td>
            <td>{{item.action}}</td>
            <td><input type="checkbox" [(ngModel)]="item.done" /></td>
            <td [ngSwitch]="item.done"> 
                <span *ngSwitchCase="true">Yes</span>
                <span *ngSwitchDefault>No</span>
            </td>
        </tr>           
    </tbody>
</table>
</block>

################################################################################
<block name=get2>
${p0}(${p2}: string, ${p3}: string): Observable<${p1}> {
		let httpHeaders = new HttpHeaders().set('Accept','application/json');
        return this.http.get<${p1}>(
            Urls.BOOKURL + '?${p2}=' + ${p2} + '&${p3}=' + ${p3}, 
                {headers: httpHeaders,
		 responseType: 'json'});
    }
</block>

################################################################################
<block name=submit>
onFormSubmit() {
	  let category = this.bookForm.get('category').value;
      let year = this.bookForm.get('year').value;	  
	  this.${s}.filterBooks(category, year)
	  .subscribe(data => this.books = data);
   } 
</block> 

################################################################################
<block name=data>
get${n}() {
	   this.${s}.${ln}.subscribe(
	      res => {
			   console.log(res);  
		  },
		  (err: HttpErrorResponse) => {
			  if (err.error instanceof Error) {
                 //A client-side or network error occurred.				  
				 console.log('An error occurred:', err.error.message);
			  } else {
                 //Backend returns unsuccessful response codes such as 404, 500 etc.				  
				 console.log('Backend returned status code: ', err.status);
				 console.log('Response body:', err.error);
			  }
		  }
	   );
   }	
</block>

################################################################################
<block name=writer>
get${n}() {
	  this.${s}.get${n}().subscribe(
	      res => { 
		      this.${ln} = res.body;
			  console.log(this.writer.books);
			  console.log(res.headers.get('Content-Type'));			  
		  },
		  err => {
			  console.log(err);
		  }
	  );	   
   }
</block>

################################################################################
<block name=books>
get${n}() {
      this.obsBooks = this.${s}.get${n}();
   }

</block>

################################################################################
<block name=writerWithFavBooks>
get${n}() {
	  this.${s}.get${n}().subscribe(
	      data => { 
		      this.favBooks = data['books'];
		  }
	  );
   }
</block>

################################################################################
<block name=favoriteWriter>
get${n}() {
	  this.${s}.get${n}.subscribe(
	      data => { 
		      this.${ln} = data;
			  console.log(this.${ln}.books);
		  },
		  (err: HttpErrorResponse) => {
		     if (err.error instanceof Error) {
                 //A client-side or network error occurred.				 
			    console.log('An error occurred:', err.error.message);
		     } else {
                 //Backend returns unsuccessful response codes such as 404, 500 etc.				 
			    console.log('Backend returned status code: ', err.status);
			    console.log('Response body:', err.error);
		     }
		  }		  
	  );	   
   }
</block>
##################################################################################
<block name=textMsg>
get${n}(): Observable<string> {
        return this.http.get(${u}.${p0}URL, {responseType: 'text'});
    }
</block>

##################################################################################
<block name=books>
get${n}(): Observable<${c}[]> {
        return this.http.get<${c}[]>(${u}.${ccc}URL);
    }
</block>
###################################################################################
<block name=filterBooks>
${ln}(${p0}: string, ${p1}: string): Observable<${c}[]> {
		let httpHeaders = new HttpHeaders()
		                  .set('Accept', 'application/json');
        return this.http.get<${c}[]>(${u}.${ccc}URL + '?${p0}=' + ${p0} + '&${p1}=' + ${p1}, {
			        headers: httpHeaders,
			        responseType: 'json'
				});
    }
</block>
###################################################################################
<block name=writerWithFavBooks>
getWriterWithFavBooks(): Observable<any> {
        return this.http.get(${u}.${ccc}URL, {responseType: 'json'});
    }
</block>
####################################################################################
<block name=writerWithFavBooks>
getFavoriteWriter(): Observable<${c}> {
        return this.http.get<Writer>(${u}.${ccc}URL, {responseType: 'json'});
    }
</block>
###################################################################################
<block name=fullResponseForWriter>
get${n}(): Observable<HttpResponse<any>> {
        return this.http.get(${u}.${ccc}URL, {
					   observe: 'response'
				   });
    }
</block>
###################################################################################
<block name=dataForUrl>
get${n}(): Observable<any> {
		return this.http.get(${u}.INVALID);
    }
</block>
###################################################################################
<block name=directive file=true>
import { Directive, ViewContainerRef, TemplateRef, Input, Attribute, 
         SimpleChanges} from "@angular/core";

@Directive({
    selector: "[${p0}]"
})
export class ${c} {

    constructor(private container: ViewContainerRef,
        private template: TemplateRef<Object>) {
    }

    @Input("${p0}")
    counter: number;

    ngOnChanges(changes: SimpleChanges) {
        this.container.clear();
        for (let i = 0; i < this.counter; i++) {
            this.container.createEmbeddedView(this.template,
                new CounterDirectiveContext(i + 1));
        }
    }
}

class CounterDirectiveContext {
    constructor(public $implicit: any) { }
}
</block>
###################################################################################
<block name=authGuard file=true>
import { Injectable } from "@angular/core";
import { ActivatedRouteSnapshot, RouterStateSnapshot,
            Router } from "@angular/router";
${imports}

@Injectable()
export class ${c} {

    constructor(private router: Router,
                private auth: ${au}) { }

    canActivate(route: ActivatedRouteSnapshot,
        state: RouterStateSnapshot): boolean {

        if (!this.auth.authenticated) {
            this.router.navigateByUrl("${u}");
            return false;
        } 
        return true;
    }
}

</block>
###################################################################################
<block name=router>
      RouterModule.forRoot([
            ${group}
            { path: "**", redirectTo: "${p0}" }
        ])
</block>
###################################################################################
<block name=router0>
            {
                path: "${p0}", 
                component: ${p1},
                canActivate: [${a}]
            },
</block>
###################################################################################
<block name=router1>
            {
                path: "${p0}", 
                loadChildren: "./${p1}/${c}#${cc}",
                canActivate: [${a}]
            },
</block>
###################################################################################
<block name=hcontainer file=true html=true>
    <div class="container-fluid">
       <div class="row">
        <div class="col bg-dark text-white">
         <a class="navbar-brand">${label}</a>
        </div>
       </div>
       <div class="row">
         ${hc}
       </div>
    </div>
</block>
###################################################################################
<block name=hleft>
  <div class="col-3 p-2">
        <button class="btn btn-block btn-outline-primary" (click)="###changeCategory###()">
          Home
        </button>
        <button *ngFor="let cat of categories" 
             class="btn btn-outline-primary btn-block"
             [class.active]="cat == selectedCategory" (click)="###changeCategory###(cat)">
          {{cat}}
        </button>
  </div>
</block>
###################################################################################
<block name=hright>
<div class="col-9 p-2">
   ${group}
<div>
</block>
###################################################################################
<block name=product>
       <div *ngFor="let product of products" class="card m-1 p-1 bg-light">
          <h4>
            {{product.name}}
            <span class="badge badge-pill badge-primary float-right">
              {{ product.price | currency:"USD":"symbol":"2.2-2" }}
            </span>
          </h4>
          <div class="card-text bg-white p-1">{{product.description}}</div>
        </div>
</block>
###################################################################################
<block name=select>
       <div class="form-inline float-left mr-1">
          <select class="form-control" [value]="productsPerPage"
                  (change)="###changePageSize###($event.target.value)">
            <option value="3">3 per Page</option>
            <option value="4">4 per Page</option>
            <option value="6">6 per Page</option>
            <option value="8">8 per Page</option>
          </select>
        </div>
</block>
###################################################################################
<block name=pgbutton>
       <div class="btn-group float-right">
          <button *counter="let page of pageCount" (click)="###changePage###(page)"
              class="btn btn-outline-primary" [class.active]="page == selectedPage">
            {{page}}
          </button>
        </div>
</block>
###################################################################################
<block name=changeCategory>
changeCategory(newCategory?: string) {
        this.selectedCategory = newCategory;
    }
</block>
###################################################################################
<block name=changePage>
changePage(newPage: number) {
        this.selectedPage = newPage;
    }
</block>
###################################################################################
<block name=changePageSize>
changePageSize(newSize: number) {
        this.productsPerPage = Number(newSize);
        this.changePage(1);
    }
</block>
###################################################################################
<block name=getProducts>
get products(): Product[] {
        let pageIndex = (this.selectedPage - 1) * this.productsPerPage
        return this.repository.getProducts(this.selectedCategory)
            .slice(pageIndex, pageIndex + this.productsPerPage);
    }
</block>
###################################################################################
<block name=getPageCount>
get pageCount(): number {
        return Math.ceil(this.repository
            .getProducts(this.selectedCategory).length / this.productsPerPage)
    }
</block>